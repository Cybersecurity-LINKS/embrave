@startuml join
'title
'Attester Join protocol
'end title
autonumber

box "Platform"
participant TPM
participant "Attester\nAgent" as attester_agent
endbox
participant "Join\nService" as join_service

'== LAK creation ==
TPM<-attester_agent: tpm2_createak
TPM<-TPM: Generate AK

'== Start Join protocol ==
TPM<-attester_agent: request EK_cert
TPM->attester_agent: EK_cert
attester_agent->join_service: POST /api/request_join: AK pub, AK name, EK cert
note right
The attester notifies its presence.
The join server responds with a challenge.
end note

' alt alredy joined
'  join_service->attester_agent: OK
' else join
  join_service->join_service: validate EK_cert
  note right
    TPM is authentic
    (validation of the EK certificate OK)
  end note
  join_service->join_service: challenge = tpm2_makecredential(EK_pub, nonce, AK_name)
  attester_agent<-join_service: challenge
  TPM<-attester_agent: tpm2_activatecredential
  note left
    tpm_activate credential verifies
    the possession of AK_priv, EK_priv
    and verifies that they are in the
    same TPM
  end note
  TPM<-TPM: activate_credential(EK_priv, challenge)
  TPM->attester_agent: nonce
  attester_agent->join_service: POST /api/confirm_credential: nonce
  join_service->join_service: Update Attester credential in the DB
  join_service->Verifier: notify a Verifier to start RA on the new Attester
' end

@enduml
