// Copyright (C) 2023 Fondazione LINKS 

// This program is free software; you can redistribute it and/or modify 
// it under the terms of the GNU General Public License as published by the Free Software Foundation; version 2.

// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
// See the GNU General Public License for more details.

// You should have received a copy of the GNU General Public License along with this program; if not, 
// write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

#ifndef __TPM_AK__
#define __TPM_AK__


#include <stdbool.h>
#include <stdlib.h>
#include <string.h>

#include "files.h"
#include "log.h"
#include "object.h"
#include "tpm2.h"
#include "tpm2_alg_util.h"
#include "tpm2_auth_util.h"
#include "tpm2_convert.h"
#include "tpm2_tool.h"
#include "tpm2_capability.h"
#include "config_parse.h"

#define MAX_SESSIONS 3

#define ATTRS  \
    TPMA_OBJECT_RESTRICTED|TPMA_OBJECT_USERWITHAUTH| \
    TPMA_OBJECT_SIGN_ENCRYPT|TPMA_OBJECT_FIXEDTPM| \
    TPMA_OBJECT_FIXEDPARENT|TPMA_OBJECT_SENSITIVEDATAORIGIN

static const TPM2B_DIGEST policy_a_sha384 = {
    .size = 48,
    .buffer = {
        0x8b, 0xbf, 0x22, 0x66, 0x53, 0x7c, 0x17, 0x1c, 0xb5, 0x6e,
        0x40, 0x3c, 0x4d, 0xc1, 0xd4, 0xb6, 0x4f, 0x43, 0x26, 0x11,
        0xdc, 0x38, 0x6e, 0x6f, 0x53, 0x20, 0x50, 0xc3, 0x27, 0x8c,
        0x93, 0x0e, 0x14, 0x3e, 0x8b, 0xb1, 0x13, 0x38, 0x24, 0xcc,
        0xb4, 0x31, 0x05, 0x38, 0x71, 0xc6, 0xdb, 0x53 }
};

static const TPM2B_DIGEST policy_a_sha512 = {
    .size = 64,
    .buffer = {
        0x1e, 0x3b, 0x76, 0x50, 0x2c, 0x8a, 0x14, 0x25, 0xaa, 0x0b,
        0x7b, 0x3f, 0xc6, 0x46, 0xa1, 0xb0, 0xfa, 0xe0, 0x63, 0xb0,
        0x3b, 0x53, 0x68, 0xf9, 0xc4, 0xcd, 0xde, 0xca, 0xff, 0x08,
        0x91, 0xdd, 0x68, 0x2b, 0xac, 0x1a, 0x85, 0xd4, 0xd8, 0x32,
        0xb7, 0x81, 0xea, 0x45, 0x19, 0x15, 0xde, 0x5f, 0xc5, 0xbf,
        0x0d, 0xc4, 0xa1, 0x91, 0x7c, 0xd4, 0x2f, 0xa0, 0x41, 0xe3,
        0xf9, 0x98, 0xe0, 0xee }
};

static const TPM2B_DIGEST policy_a_sm3_256 = {
    .size = 32,
    .buffer = {
        0xc6, 0x7f, 0x7d, 0x35, 0xf6, 0x6f, 0x3b, 0xec, 0x13, 0xc8,
        0x9f, 0xe8, 0x98, 0x92, 0x1c, 0x65, 0x1b, 0x0c, 0xb5, 0xa3,
        0x8a, 0x92, 0x69, 0x0a, 0x62, 0xa4, 0x3c, 0x00, 0x12, 0xe4,
        0xfb, 0x8b }
};

static const TPM2B_DIGEST policy_c_sha384 = {
    .size = 48,
    .buffer = {
        0xd6, 0x03, 0x2c, 0xe6, 0x1f, 0x2f, 0xb3, 0xc2, 0x40, 0xeb,
        0x3c, 0xf6, 0xa3, 0x32, 0x37, 0xef, 0x2b, 0x6a, 0x16, 0xf4,
        0x29, 0x3c, 0x22, 0xb4, 0x55, 0xe2, 0x61, 0xcf, 0xfd, 0x21,
        0x7a, 0xd5, 0xb4, 0x94, 0x7c, 0x2d, 0x73, 0xe6, 0x30, 0x05,
        0xee, 0xd2, 0xdc, 0x2b, 0x35, 0x93, 0xd1, 0x65 }
};

static const TPM2B_DIGEST policy_c_sha512 = {
    .size = 64,
    .buffer = {
        0x58, 0x9e, 0xe1, 0xe1, 0x46, 0x54, 0x47, 0x16, 0xe8, 0xde,
        0xaf, 0xe6, 0xdb, 0x24, 0x7b, 0x01, 0xb8, 0x1e, 0x9f, 0x9c,
        0x7d, 0xd1, 0x6b, 0x81, 0x4a, 0xa1, 0x59, 0x13, 0x87, 0x49,
        0x10, 0x5f, 0xba, 0x53, 0x88, 0xdd, 0x1d, 0xea, 0x70, 0x2f,
        0x35, 0x24, 0x0c, 0x18, 0x49, 0x33, 0x12, 0x1e, 0x2c, 0x61,
        0xb8, 0xf5, 0x0d, 0x3e, 0xf9, 0x13, 0x93, 0xa4, 0x9a, 0x38,
        0xc3, 0xf7, 0x3f, 0xc8 }
};

static const TPM2B_DIGEST policy_c_sm3_256 = {
    .size = 32,
    .buffer = {
        0x2d, 0x4e, 0x81, 0x57, 0x8c, 0x35, 0x31, 0xd9, 0xbd, 0x1c,
        0xdd, 0x7d, 0x02, 0xba, 0x29, 0x8d, 0x56, 0x99, 0xa3, 0xe3,
        0x9f, 0xc3, 0x55, 0x1b, 0xfe, 0xff, 0xcf, 0x13, 0x2b, 0x49,
        0xe1, 0x1d }
};

/* AK context */
struct createak_context {
    struct {
        const char *ctx_arg;
        tpm2_loaded_object ek_ctx;
        tpm2_session *session;
        char *auth_str;
    } ek;
    struct {
        struct {
            TPM2B_SENSITIVE_CREATE in_sensitive;
            struct {
                const char *type;
                const char *digest;
                const char *sign;
            } alg;
        } in;
        struct {
            const char *ctx_file;
            tpm2_convert_pubkey_fmt pub_fmt;
            const char *pub_file;
            const char *name_file;
            const char *priv_file;
            const char *qname_file;
        } out;
        char *auth_str;
    } ak;
    struct {
        UINT8 f :1;
    } flags;
};

struct tpm_evictcontrol_ctx {
    /*
     * Inputs
     */
    struct {
        const char *ctx_path;
        const char *auth_str;
        tpm2_loaded_object object;
    } auth_hierarchy;

    struct {
        char *ctx_path;
        tpm2_loaded_object object;
    } to_persist_key;

    TPMI_DH_PERSISTENT persist_handle;
    bool is_persistent_handle_specified;

    /*
     * Outputs
     */
    const char *output_arg;
    ESYS_TR out_tr;

    /*
     * Parameter hashes
     */
    const char *cp_hash_path;
    TPM2B_DIGEST cp_hash;
    bool is_command_dispatch;
    TPMI_ALG_HASH parameter_hash_algorithm;
};

tool_rc attester_create_ak(ESYS_CONTEXT *ectx, struct attester_conf *conf);
tool_rc attester_evictcontrol(ESYS_CONTEXT *ectx, struct attester_conf *conf);

#endif